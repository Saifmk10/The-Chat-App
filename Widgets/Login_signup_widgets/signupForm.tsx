import React, { useState , useEffect } from "react";
import { View, Text, StyleSheet, TouchableOpacity, TextInput, Alert } from "react-native";
import colors from 'D:\\PROJECTS\\The-Chat-App\\Assets\\colors.js'

import { getAuth, createUserWithEmailAndPassword , onAuthStateChanged } from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';

// the bellow function is the main function of the widget that holds both the ui and the logic behind the signup of the application. The ui and the signup logics are however seperated with the help of functions

const SignupForm = () => {

    // The three constants bellow are the useState hooks that are used to get the data from the userinput.
    const [Email, setEmail] = useState("");
    const [Password, setPassword] = useState("");
    const [UserName , setUserName] = useState("");
    const [UserID , setUserId] = useState("");


    // The signupUserLogic is the function that is responsible for the logic behind registeration users with the help of firebase . The function createUserWithEmailAndPassword() is used here to add the user details into the authenticator
    // however the need of getting more details about the users such as username and full name are fullfilled with the help of firestore database.
    const signupUserLogic = () => {

        // The createUserWithEmailAndPassword() is used to register the user into the authenticator. 
        createUserWithEmailAndPassword(getAuth(), Email, Password)
            .then((userCredentails) => {
                const UID = userCredentails.user.uid; // once the user has registered successfully im fetching the UID generated by firebase just for debugging purpose as of now 
                const createdDate = userCredentails.user.metadata.creationTime; // this const is responsible for grabbing the meta data of the registration and then add that into the fire store , here were looking at the timestamp metadata
                
// replace this with the model
                console.log('Welcome ${useremail}');
            
                // This plays an important role where once the account is created the account details are moved to the fireabse where we can store only user email , provider and UID , but i need more than that such as username , fullname , time of creation and so on 
                // so im using the firestore function and using set() to add all the details are added by the user directly from the input field. 
                // point to be noted : I have cerated a collection called Users , where the UID of the users will be added after registration and all these data will be added to that file of UID
                firestore().collection('Users').doc(UID).set({Username : UserName , Email : Email , AccountCreated : createdDate , UserId : UID}).then(()=>{
                    Alert.alert('Welcome ' + UID)
                }).catch(error => (
                    Alert.alert('Welcome ' + error)
                ))

            })
            .catch(error => {
                if (error.code === 'auth/email-already-in-use') {
                    console.log('That email address is already in use!');
                    Alert.alert("Account already exists...");
                }

                if (error.code === 'auth/invalid-email') {
                    console.log('That email address is invalid!');
                    Alert.alert("Gmail format not right");
                }

                console.error(error);
            });

    }

    


    return (

        // <ScrollView></>
        <View style={loginSignupStyle.signupFormParent}>

            <View>
                <TextInput placeholder="Full Name" placeholderTextColor="#000000" cursorColor={'#000000'} style={loginSignupStyle.signinFormInput} />
                <TextInput keyboardType="email-address" placeholder="Email" placeholderTextColor="#000000" cursorColor={'#000000'} style={loginSignupStyle.signinFormInput}
                    value={Email} onChangeText={setEmail} />
                <TextInput placeholder="Choose an Username" placeholderTextColor="#000000" cursorColor={'#000000'} style={loginSignupStyle.signinFormInput} value={UserName} onChangeText={setUserName}/>
                <TextInput secureTextEntry={true} placeholder="Set Password" placeholderTextColor="#000000" cursorColor={'#000000'} style={loginSignupStyle.signinFormInput} 
                    value={Password} onChangeText={setPassword} />
            </View>
            <TouchableOpacity onPress={signupUserLogic}>
                <Text  style={loginSignupStyle.signinButton}>
                    Sign Up
                </Text>
            </TouchableOpacity>

        </View>
    )
}


const loginSignupStyle = StyleSheet.create({

    // holds all the forms and buttons that are realted to the login form within this 
    signupFormParent: {
        backgroundColor: colors.secondary,
        height: 430,
        marginTop: 8,
        width: 300,
        paddingTop: 50,
        alignItems: 'center',

        borderRadius: 10
    },



    // design for the input field of the login form
    signinFormInput: {
        borderWidth: 3,
        borderColor: colors.primary,
        borderRadius: 10,
        marginBottom: 20,

        color: colors.primary,
        fontFamily: 'Jura-Bold',
        fontSize: 15,

        width: 250
    },

    signinButton: {
        backgroundColor: colors.primary,
        height: 38,
        width: 130,
        borderRadius: 15,


        color: colors.secondary,
        fontFamily: 'Jura-Bold',
        fontSize: 18,

        justifyContent: 'center',
        alignItems: 'center',
        verticalAlign: 'middle',
        textAlign: 'center',

        marginTop: 20
    },

})

export default SignupForm;