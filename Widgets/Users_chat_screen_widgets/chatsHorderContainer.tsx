import * as REACT from "react";
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet , FlatList } from "react-native";
import { useRoute } from "@react-navigation/native";
import { getDatabase, ref, onChildAdded } from '@react-native-firebase/database';
import auth from '@react-native-firebase/auth';
import { getApp } from '@react-native-firebase/app';

const ChatHolderContainer = () => {

    // fetching the username from the userChatWidget.tsx using the route prop
    const route = useRoute<any>();
    const { UserName, userUID } = route.params;

    // fetchcin the current logged in user by using the auth fucntion from the firebase authentication , this i used to fetch the user uid of the user the current logged in user has clicked on for texting
    const user = auth().currentUser;
    const currentUserID = user?.uid;

    // usestate props used to hold the user key that is generated by the useeffect bellow , also hold the message array to be rendered later
    const [USER_KEY, setUSER_KEY] = useState<string>("");
    const [messages, setMessages] = useState<{ message: string; sender: string; time: string }[]>([]);

    


    // useeffect prop used to generate the user key, this is done with the help of combination of both current user and the user id the logged in user has clicked on
    // this use effect takes in input currentuserid and the userID
    useEffect(() => {
        if (currentUserID && userUID) {
            const key = currentUserID < userUID ? `${currentUserID}_${userUID}` : `${userUID}_${currentUserID}`;
            setUSER_KEY(key);
            console.log(`USER KEY CREATED: ${key} FROM ChatHolderContainer`);
        } else {
            console.log("Missing user IDs — couldn't create chat key FROM ChatHolderContainer");
        }
    }, [currentUserID, userUID]);

    


    // main useeffect used to fetch all the messages in order they were send , here were using the onchild added function form the firebase realtime db to fetch the data in the exact order it was saved
    useEffect(() => {

        if (!USER_KEY) {
            console.log("USER_KEY not found — cannot fetch messages. FROM ChatHolderContainer");
            return;
        }

        console.log(`USER ${currentUserID} READY TO CHAT WITH ${userUID} USING KEY: ${USER_KEY}`);

        const db = getDatabase(getApp(), "https://the-chat-44e8e-default-rtdb.asia-southeast1.firebasedatabase.app");
        const messageRef = ref(db, `UserChat/${USER_KEY}`);
        console.log(`Fetching messages from path: UserChat/${USER_KEY} FROM ChatHolderContainer`);

        // Using onChildAdded to get messages in insertion order
        const unsubscribe = onChildAdded(messageRef, snapshot => {
            if (!snapshot.exists()) return;

            const msg = snapshot.val();
            console.log("New message received:", msg);

            // Append new message to messages array
            setMessages(prev => {
                const updatedMessages = [...prev, { message: msg.Message, sender: msg.Sender, time: msg.Time }];
                console.log("Updated messages array:");
                updatedMessages.forEach((m, idx) => {
                    console.log(`${idx + 1}. Sender: ${m.sender}, Message: ${m.message}, Time: ${m.time}`);
                });
                return updatedMessages;
            });
        });

        return () => {
            unsubscribe();
            console.log("Unsubscribed from messages on cleanup");
        };

    }, [USER_KEY]);

    


    // react jsx section where all the rendering will take place 
    return (
        <View>
            {messages.map((msg, index) => (
                <View
                    key={index}
                    style={msg.sender === currentUserID ? design.senderContainerParent : undefined}
                >
                    <Text
                        style={
                            msg.sender === currentUserID
                                ? design.senderContainerDesign
                                : design.recievedMessageContainerDesign
                        }
                    >
                        {msg.message}
                    </Text>

        
                    <Text style={design.timeStamp}>{msg.time}</Text>
                </View>
            ))}
        </View>
    );

};

const design = StyleSheet.create({
    senderContainerParent: {
        alignItems: "flex-end"
    },
    senderContainerDesign: {
        backgroundColor: "#5F48F5",
        maxWidth: 250,
        padding: 10,
        margin: 5,
        borderRadius: 15,
        fontFamily: "Jura-Bold",
        color: "#D9D9D9",
        lineHeight: 20,
        alignItems: "flex-end"
    },
    recievedMessageContainerDesign: {
        backgroundColor: "#D9D9D9",
        maxWidth: 250,
        padding: 10,
        margin: 5,
        borderRadius: 15,
        fontFamily: "Jura-Bold",
        lineHeight: 20,
        alignSelf: "flex-start"
    },
    
    timeStamp: {
        fontSize: 6,
        color: "#888",
        padding : 1
    }
});

export default ChatHolderContainer;
